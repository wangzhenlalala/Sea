* 代码的重用
* 从一个类创建另一个类，继承&组合
* 多态为类提供一个标准
	- 抽象类
	- 具体类
* 接口和实现的区别， 数据隐藏
* 实例化一个对象的时候，首先应该调用super(props)，父类的构造函数
* 作用域：
	+ 局部属性
	+ 对象属性
	+ 类属性
* 任何类都不可能是一个孤岛
* 构建类要以合作作为出发点
	+ 一个类可以为其他类提供服务，也可以请求其他类的服务
* 一个自我完备的 系统
* 类能够对真实对象以及这些对象与其他真实对象如何交互进行建模
* 明确公共接口
* 设计健壮的构造函数和析构函数
* 在类中设计错误处理
* 对类建立文档以及使用注释
* 考虑重用
* 考虑可扩展性
* 类要尽可能的自己负责自己的行为
 - printCircle(circle)
 - printSquare(square)
 =++++++=
 Shape.print() //多态
 形状知道自己如何打印



 - 完成适当的分析
 - 建立一份描述系统的工作陈述-描述系统的文档
 - 从这个工作陈述出发收集需求
 - 开发一个用户界面原型
 - 明确类
 	+ 名词
 	+ 设计是一个迭代的过程
 	+ CRC（class-responsibility-collaboration）
 - 确定各个类的职责
 - 确定各个类如何相互交互
 	+ use-case 用例场景
 - 创建一个高层模型来描述要构建的系统

 - 只关心系统做什么，而不关心系统怎么做


 - 设计一个系统，总是需要很多的权衡   复杂性和更多的功能
 - 过度的抽象会是的系统变得复杂
 - 创建有足够粒度从而能适当表述的对象模型。 模型的复杂度
 - 决策时要考虑到未来



 + 使用 接口和抽象类 来实现设计 遵守** 契约 **, 来实现代码，系统的一部分，整个系统给的重用
 - 创建可重用代码的一种方法就是创建框架
 - 代码重用和 标准化 （即插即用）

 - 继承： 实现继承(implemetation inheritance)
 - 接口： 定义继承(definition inheritance)

 + inheritance是一种严格的is-a关系，但interface不是, interface可以跨越多个类
 - 使用严格继承的类必须是相关的
 - 接口可以用于没有关联的类， 接口只对行为建模，不提供任何类型的实现


 - 组合 composition
 	+ 聚集 aggregation
 	+ 关联 relation
 - 一个类需要其他类提供的服务，来完成自己的职责

 - 基数
 	+ 参与关联的对象的个数
 	+ 这种参与是可选的还是强制的

 - 哪些对象和另外的对象协作
 - 每个协作中有多少对象参与
 - 这种协作是可选的还是强制的