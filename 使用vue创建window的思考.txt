1. vue是一个框架，定义了逻辑流，控制流，和一个使用这些功能的 contract 契约
2. options参数，就是contract: data，template, watcher...
3. vue(options)
4. vue的单文件组件
	* template: el || render
	* script: name, mixins, components, data, prop, methods, computed, watch, mounted, update ...
	* style
	??? 最后得到的是一个 options contract,然后交给vue来处理

懒加载 (Vue && Webpack)
	- 什么东西懒加载？？？ 什么样的个体 ？？ 变量， 函数， 组件， 文件 ？？？？

* Template 使用data，来呈现自己
* Data 状态，决定了模板的样子

* Expression vs Value
	Evaluate( Expression ) => Value
* vue是如何把data里面的属性代理到 vm 实例上的 ???
* vue是如何缓存computed属性的value的 ????
* 当一个vm实例/组件 被destroyed的时候，vue做了哪些工作 ????

* Vue是一个类 new Vue(options)是实例化一个vue实例 ???
	Vue.components(component-name, options) 
	是不是就是创建了一个Vue的子类 component-name ???

	<component-name></component-name>
	是不是就创建了一个 component-name 的实例 ???
	// Components are reusable Vue instances with a name ！！！

* 组件的注册
	To use these components in templates, they must be registered so that Vue knows about them. 
	There are two types of component registration: global and local.
	Globally registered components can be used in the template of any root Vue instance (new Vue) 
	[[ Root Vue instance ]] vue的根实例,根组件

* 如果一个实例的data中有一个属性是好几层的对象，vue会深度对他进行 observe 吗？
	每次该属性改变的时候，都会重新 深度 observe吗

* 访问一个 reactive属性，就是声明了对该属性的依赖， 改依赖被 reactive属性 收集起来


* Component VS DataObj VS Template
	Component has a DataObj
	Component has a Template
	Component 类 是 DataObj和 Template的组合

	Component 集合
	DataObj 集合
	Template 集合

	ComponentSet = DataObjSet X Template (笛卡尔积)
	Component = (DataObj, Template) 的 binary tuple 二元组

* Component 可以是自给自足的
* ComponentA(DataObjA, TemplateA)
				|
				|  可以通过props来把DataObjA中的响应式属性传给ComponentB，使得ComponentB形成对改属性的依赖
				!
* ComponentB(DAtaObjB, TemplateB)

* Store Vuex的状态管理器，可以看作一个DataObj的集合

* 每个Vue实例都实现了 subscribe/dispatch 订阅/发布 接口
	- vm.$emit
	- vm.$on

* import CompA from 'xx.vue'
* {
	components: {
		'com-custom': CompA //options object
	}
  } 

 * $options 
 * vm.$watch(expOrFn, callback, options);

 * Models are just plain JavaScript objects, When you modify them, the view updates.

 * dependency tracking 
 * 什么是依赖？ 谁才是依赖？ 谁依赖谁？ 
 * Modal是数据源，他们发生变化，他们的变化需要被别人知道。 别人依赖于他们的变化。 
 * 所以 watcher depends on data
 * watcher 依赖于 数据； 数据是watcher的依赖
 * watcher {
 	has deps
 }

 * Every component instance has a corresponding watcher instance, 
 * which records any properties “touched” during the component’s render as dependencies. 
 * Later on when a dependency’s setter is triggered, 
 * it notifies the watcher, which in turn causes the component to re-render.



 * [ Event loop and requestAnimaionFrame ] 没有任何关系，，
 * 仅仅都可以作为 实现异步操作的 方式 ！！！！！！


 * In order to wait until Vue.js has finished updating the DOM after a data change, 
 * you can use Vue.nextTick(callback) immediately after the data is changed. 
 * The callback will be called after the DOM has been updated.  

 * $nextTick() returns a promise


```
	Observer -- any object that wishes to be notified when the state of another object changes
	Observable -- any object whose state may be of interest, and in whom another object may register an interest
```

Modal(observable) <---> watcher <---> View(observer)
								<---> 任何想监听Modal变化的对象
View作为一个整体，依赖于很多的Modal属性，由watcher来统一的管理View的依赖
任何想监听Modal变化的对象，都可以通过watcher来声明对很多个Modal属性的依赖
从而可以减少Modal的subscriber的逻辑
还可以通过watcher来对重复的依赖/不再需要的依赖进行过滤

* multiple, synchronized presentations of the same data.


* Html attributes
* Dom properties